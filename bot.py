import telebot
from keyboard_mixin import KeyboardMixin
from models import DataAccess
from ai_logic import InterviewThisOutOfOpenAI
from business_logic import BusinessLogic
import os
from dotenv import load_dotenv
from telebot import types

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')

bot = telebot.TeleBot(API_TOKEN)
kb = KeyboardMixin()
data_access = DataAccess()
bussiness_logic = BusinessLogic()

temp_data = {}
interview_data = {}
interview_question = {}


@bot.message_handler(commands=['start'])
def start(message):
    
    login = str(message.from_user.id)
    if data_access.add_user(login):
        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –Ω–∞—á–Ω–µ–º!",
                         reply_markup=kb.main_menu())
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìö')
def info(message):
    bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –ø–æ —è–∑—ã–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ üßë‚Äçüíª'
@bot.message_handler(func=lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ üßë‚Äçüíª')
def ai_interview_topics(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', reply_markup=kb.topics_kb(True))
    bot.register_next_step_handler(message, ai_interview_question)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è AI –°–æ–±–µ—Å
def ai_interview_question(message):
    chat_id = message.chat.id
    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(chat_id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=kb.main_menu())
        return
    interview_data[chat_id] = {'topic': message.text}
    if interview_data[chat_id]['topic'] == 'Python':
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤:', reply_markup=kb.difficulty_kb(True))
        bot.register_next_step_handler(message, ai_interview_start)
    if interview_data[chat_id]['topic'] == 'Django':
        login = message.from_user.id
        existing_user = data_access.get_existing_user(login)
        question = data_access.get_random_unanswered_question(existing_user.login, 'Django')
        if question:
            interview_question[chat_id] = {'question': question}
            bot.send_message(chat_id, question.question, reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, ai_interview_receive_answer)
        else:
            bot.send_message(chat_id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—à–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ Django! üéâ", reply_markup=kb.main_menu())

def ai_interview_receive_answer(message):
    chat_id = message.chat.id
    user_answer = message.text  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = data_access.get_user_id_by_login(message.from_user.id)
    question = interview_question[chat_id]['question'].question
    question_id = int(interview_question[chat_id]['question'].id)
    reference_question = interview_question[chat_id]['question'].answer
    answer_gpt = InterviewThisOutOfOpenAI(question, reference_question, user_answer).get_response()
    score = bussiness_logic.extract_first_digit(answer_gpt)
    data_access.save_progress(user_id, question_id, user_answer, score)
    bot.send_message(chat_id, answer_gpt, reply_markup=kb.interview_reply_kb())

@bot.message_handler(func=lambda message: message.text in ['–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è', '–ö –≤—ã–±–æ—Ä—É —Ç–µ–º—ã üìù', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†'])
def handle_reply_buttons(message):
    chat_id = message.chat.id
    if message.text == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è':
        existing_user = data_access.get_existing_user(message.from_user.id)
        question = data_access.get_random_unanswered_question(existing_user.login, 'Django')
        if question:
            interview_question[chat_id] = {'question': question}
            bot.send_message(chat_id, question.question, reply_markup=kb.main_menu())
            bot.register_next_step_handler(message, ai_interview_receive_answer)
        else:
            bot.send_message(chat_id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—à–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ Django! üéâ", reply_markup=kb.main_menu())
    elif message.text == '–ö –≤—ã–±–æ—Ä—É —Ç–µ–º—ã üìù':
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', reply_markup=kb.topics_kb(True))
        bot.register_next_step_handler(message, ai_interview_question)
    elif message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        bot.send_message(chat_id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è AI –°–æ–±–µ—Å Python
def ai_interview_start(message):
    chat_id = message.chat.id
    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(chat_id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã:', reply_markup=kb.topics_kb(True))
        bot.register_next_step_handler(message, ai_interview_question)
        return
    bot.send_message(chat_id, '–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!', reply_markup=kb.user_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    bot.send_message(message.chat.id, 'üßê –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.',
                     reply_markup=kb.main_menu())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print('Bot is running')
    bot.polling(none_stop=True)

