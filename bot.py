import telebot
from keyboard_mixin import KeyboardMixin
from models import DataAccess
from ai_logic import Interview, InterviewThisOutReferensAnswer
from business_logic import BusinessLogic
import os
from dotenv import load_dotenv
from telebot import types
from logger import logger

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')

bot = telebot.TeleBot(API_TOKEN)
kb = KeyboardMixin()
data_access = DataAccess()
bussiness_logic = BusinessLogic()

temp_data = {}
interview_data = {}
interview_question = {}


@logger.catch
@bot.message_handler(commands=['start', 'help'])
def start(message):
    try:
        login = str(message.from_user.id)
        data_access.add_user(login)
        bot.send_message(message.chat.id,
                         f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –Ω–∞—á–Ω–µ–º!',
                         reply_markup=kb.main_menu())

    except AttributeError:
        bot.send_message(
            message.chat.id,
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç')
    except telebot.apihelper.ApiException:
        bot.send_message(
            message.chat.id,
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç')
    except Exception:
        bot.send_message(
            message.chat.id,
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@logger.catch
@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìö')
def info(message):
    bot.send_message(
        message.chat.id,
        '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –ø–æ '
        '—è–∑—ã–∫—É Python, Django –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ '
        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–û–û–ü). –û–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, '
        '–æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è '
        '—É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤. –ù–∞ –¥–µ–Ω—å —É –≤–∞—Å –µ—Å—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.'
        '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–æ 10. –í –ø—Ä–æ—Ñ–∏–ª–∫–µ –≤—ã '
        '–º–æ–∂–µ—Ç–µ –Ω–∞–±–ª—é–¥–∞—Ç—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è. –í–æ–ø—Ä–æ—Å –≤–∞–º '
        '–∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ 7 –±–∞–ª–ª–æ–≤ –∏ –≤—ã—à–µ. –í –Ω–∞—á–∞–ª–µ –≤—Å–µ '
        '–≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏, –ø–æ—Å–ª–µ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å—ã, –Ω–∏–∂–µ '
        '–ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞, –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –±—É–¥—É—Ç –∑–∞—á—Ç–µ–Ω—ã.')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—å"
@logger.catch
@bot.message_handler(func=lambda message: message.text == '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üßë')
def profile(message):
    user = data_access.get_user(message.from_user.id)
    limit = user.question_limit
    progress_python_trainee = data_access.get_progress_Python(user.id)[0]
    progress_python_junior = data_access.get_progress_Python(user.id)[1]
    progress_python_middle = data_access.get_progress_Python(user.id)[2]
    progress_django = data_access.get_progress_topic(user.id, 'Django')
    progress_oop = data_access.get_progress_topic(user.id, '–û–û–ü')
    bot.send_message(
        message.chat.id,
        f'–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {limit} –ø–æ–ø—ã—Ç–æ–∫.\n'
        f'–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è Python(trainee): {progress_python_trainee}%\n'
        f'–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è Python(junior): {progress_python_junior}%\n'
        f'–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è Python(middle): {progress_python_middle}%\n'
        f'–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è Django: {progress_django}%\n'
        f'–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –û–û–ü: {progress_oop}%')


@logger.catch
@bot.message_handler(
        func=lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ üßë‚Äçüíª')
def ai_interview_topics(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:',
                     reply_markup=kb.topics_kb(True))
    bot.register_next_step_handler(message, ai_interview_question)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è AI –°–æ–±–µ—Å
@logger.catch
def ai_interview_question(message):
    chat_id = message.chat.id
    login = message.from_user.id
    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(chat_id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=kb.main_menu())
        return

    interview_data[chat_id] = {}
    if message.text == 'Python(trainee)':
        interview_data[chat_id]['topic'] = 'Python'
        interview_data[chat_id]['difficulty'] = 'trainee'
        get_question(message, login, chat_id, 'Python', 'trainee')
    elif message.text == 'Python(junior)':
        interview_data[chat_id]['topic'] = 'Python'
        interview_data[chat_id]['difficulty'] = 'junior'
        get_question(message, login, chat_id, 'Python', 'junior')
    elif message.text == 'Python(middle)':
        interview_data[chat_id]['topic'] = 'Python'
        interview_data[chat_id]['difficulty'] = 'middle'
        get_question(message, login, chat_id, 'Python', 'middle')
    elif message.text == 'Django':
        interview_data[chat_id]['topic'] = 'Django'
        interview_data[chat_id]['difficulty'] = None
        get_question(message, login, chat_id, 'Django')
    elif message.text == '–û–û–ü':
        interview_data[chat_id]['topic'] = '–û–û–ü'
        interview_data[chat_id]['difficulty'] = None
        get_question(message, login, chat_id, '–û–û–ü')


@logger.catch
def get_question(message, login, chat_id, topic, difficulty=None):
    user = data_access.get_user(login)
    data_access.check_date(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å
    question = data_access.get_random_unanswered_question(
        user.login, topic, difficulty)
    if question:
        if question == -1:
            bot.send_message(
                chat_id,
                '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—Å—è–∫–ª–æ, –∑–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                reply_markup=kb.main_menu())
        elif question == -2:
            if difficulty:
                bot.send_message(
                    chat_id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!'
                    f'\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—à–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ {topic}({difficulty})! üéâ',
                    reply_markup=kb.main_menu())
            else:
                bot.send_message(
                    chat_id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!'
                    f'\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—à–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ {topic}! üéâ',
                    reply_markup=kb.main_menu())
        else:
            interview_question[chat_id] = {'question': question}
            bot.send_message(chat_id, '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å:')
            bot.send_message(
                chat_id, question.question,
                reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(
                message, ai_interview_receive_answer)
    else:
        bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!')


@logger.catch
def ai_interview_receive_answer(message):
    chat_id = message.chat.id
    user_answer = message.text  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    login = message.from_user.id

    msg = bot.send_message(chat_id, '‚öôÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ...')

    question = interview_question[chat_id]['question'].question
    question_id = int(interview_question[chat_id]['question'].id)
    reference_answer = interview_question[chat_id]['question'].answer

    if reference_answer:
        answer_gpt = Interview(question, reference_answer, user_answer). \
            get_response()
    else:
        answer_gpt = InterviewThisOutReferensAnswer(
            question, reference_answer, user_answer).get_response()

    score = bussiness_logic.extract_first_digit(answer_gpt)
    data_access.save_progress(login, question_id, user_answer, score)

    bot.edit_message_text(chat_id=chat_id,
                          message_id=msg.message_id,
                          text=answer_gpt,
                          reply_markup=kb.interview_menu())


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@logger.catch
@bot.callback_query_handler(func=lambda call: call.data == "next_question")
def callback_next_question(call):
    chat_id = call.message.chat.id
    login = call.from_user.id
    topic = interview_data[chat_id]['topic']
    difficulty = interview_data[chat_id]['difficulty']
    get_question(call.message, login, chat_id, topic, difficulty)

    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    bot.edit_message_reply_markup(chat_id=chat_id,
                                  message_id=call.message.message_id,
                                  reply_markup=None)


@logger.catch
@bot.callback_query_handler(func=lambda call: call.data == "topic")
def call_back_main_menu(call):
    bot.send_message(call.message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:',
                     reply_markup=kb.topics_kb(True))
    bot.register_next_step_handler(call.message, ai_interview_question)


@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def callback_main_menu(call):
    bot.send_message(call.message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                     reply_markup=kb.main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@logger.catch
@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    bot.send_message(
        message.chat.id,
        'üßê –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.',
        reply_markup=kb.main_menu())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    while True:
        try:
            bot.polling()
        except Exception:
            continue
