import telebot
from keyboard_mixin import KeyboardMixin
from models import DataAccess
from ai_logic import InterviewThisOutOfOpenAI
from sqlalchemy.orm import joinedload
import os
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')

bot = telebot.TeleBot(API_TOKEN)
kb = KeyboardMixin()
data_access = DataAccess()

temp_data = {}
interview_data = {}
interview_question = {}


@bot.message_handler(commands=['start'])
def start(message):
    
    login = str(message.from_user.id)
    if data_access.add_user(login):
        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –Ω–∞—á–Ω–µ–º!",
                         reply_markup=kb.main_menu())
    


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìö')
def info(message):
    bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –ø–æ —è–∑—ã–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ üßë‚Äçüíª'
@bot.message_handler(func=lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ üßë‚Äçüíª')
def ai_interview_topics(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', reply_markup=kb.topics_kb(True))
    bot.register_next_step_handler(message, ai_interview_difficulty)


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ üßë‚Äçüíª"
# @bot.message_handler(func=lambda message: message.text == 'AI –°–æ–±–µ—Å')
# def ai_interview_button(message):
#     chat_id = message.chat.id
#     bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:', reply_markup=kb.amount_question_kb(True))
#     bot.register_next_step_handler(message, ai_interview_topics)


# # –ü–æ—è–≤–ª–µ–Ω–∏–µ —Ç–µ–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è AI –°–æ–±–µ—Å
# def ai_interview_topics(message):
#     chat_id = message.chat.id
#     if message.text == '–ù–∞–∑–∞–¥':
#         bot.send_message(chat_id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', reply_markup=kb.interview_menu())
#         return
#     amount = message.text
#     interview_data[chat_id] = {'type': 'AI –°–æ–±–µ—Å', 'amount': amount}
#     bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', reply_markup=kb.topics_kb(True))
#     bot.register_next_step_handler(message, ai_interview_difficulty)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è AI –°–æ–±–µ—Å
def ai_interview_difficulty(message):
    chat_id = message.chat.id
    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(chat_id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=kb.main_menu())
        bot.register_next_step_handler(message, start)
        return
    interview_data[chat_id] = {'topic': message.text}
    if interview_data[chat_id]['topic'] == 'Python':
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤:', reply_markup=kb.difficulty_kb(True))
        bot.register_next_step_handler(message, ai_interview_start)
    if interview_data[chat_id]['topic'] == 'Django':
        login = message.from_user.id
        existing_user = data_access.get_existing_user(login)
        question = data_access.get_random_unanswered_question(existing_user.login, 'Django')
        interview_question[chat_id] = {'question': question}
        if existing_user:
            bot.send_message(chat_id,
                             question.question)
            bot.register_next_step_handler(message, ai_interview_receive_answer)

def ai_interview_receive_answer(message):
    chat_id = message.chat.id
    user_answer = message.text  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    login = message.from_user.id
    question = interview_question[chat_id]['question'].question
    reference_question = interview_question[chat_id]['question'].answer
    interview = InterviewThisOutOfOpenAI(question, reference_question, user_answer)
    bot.send_message(chat_id, interview.get_response())





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è AI –°–æ–±–µ—Å
def ai_interview_start(message):
    chat_id = message.chat.id
    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(chat_id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã:', reply_markup=kb.topics_kb(True))
        bot.register_next_step_handler(message, ai_interview_difficulty)
        return
    bot.send_message(chat_id, '–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!', reply_markup=kb.user_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–ø—Ä–æ—Å—ã"
@bot.message_handler(func=lambda message: message.text == '–í–æ–ø—Ä–æ—Å—ã')
def questions_button(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–æ–≤:', reply_markup=kb.topics_kb(True))
    bot.register_next_step_handler(message, question_difficulty)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
def question_difficulty(message):
    chat_id = message.chat.id
    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(chat_id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', reply_markup=kb.interview_menu())
        return
    interview_data[chat_id] = {'type': '–í–æ–ø—Ä–æ—Å—ã', 'topic': message.text}
    if interview_data[chat_id]['topic'] == 'Python':
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤:', reply_markup=kb.difficulty_kb(True))
        bot.register_next_step_handler(message, question_amount)
    else:
        bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:', reply_markup=kb.amount_question_kb(True))
        bot.register_next_step_handler(message, question_amount)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def question_amount(message):
    chat_id = message.chat.id
    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(chat_id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤:', reply_markup=kb.topics_kb(True))
        bot.register_next_step_handler(message, question_difficulty)
        return
    interview_data[chat_id]['amount'] = message.text
    bot.send_message(chat_id, '–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!', reply_markup=kb.user_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    bot.send_message(message.chat.id, 'üßê –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.',
                     reply_markup=kb.main_menu())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print('Bot is running')
    bot.polling(none_stop=True)

